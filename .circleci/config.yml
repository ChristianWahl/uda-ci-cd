version: 2.1

parameters:
  stack-name: 
    type: string
    default: "uda-prod-${CIRCLE_WORKFLOW_ID}"

commands:
  destroy_environment:
    steps:
      - run:
          name: Destroy environment
          command: |
            aws cloudformation delete-stack --region=eu-central-1 --stack-name << pipeline.parameters.stack-name >>

jobs:
  create_infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Ensure backend infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file template.yml \
              --stack-name << pipeline.parameters.stack-name >>
  configure_infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: 
            - "4c:a2:f6:27:8f:f6:cf:71:7a:66:dd:ad:5a:cf:5d:55"
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            pip3 install --upgrade pip
            pip3 install awscli
      - run:
          name: Add EC2 instance ip to inventory
          command: |
            aws ec2 describe-instances \
            --region=eu-central-1 \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:Purpose,Values=cicd1" \
            --output text >> inventory           
      - run:
          name: Configure server
          command: |
            ansible-playbook -i inventory main.yml
      - destroy_environment
          when: on_fail
  smoke_test:
    docker:
      - image: alpine:latest
    steps:
      - run:
          name: Install curl
          command: apk add curl
      - run:
          name: SmokeTest
          command: |
            if curl -s --head "https://google.com" 
            then
              echo "It worked!"
              exit 0
            else
              echo "It failed"
              exit 1
            fi
      - destroy_environment
          when: on_fail
  delete_infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - run:
          name: Delete infrastructure
          command: |
            aws cloudformation delete-stack --region=eu-central-1 --stack-name << pipeline.parameters.stack-name >>
workflows:
  my_workflow:
    jobs:
      - create_infrastructure
      - configure_infrastructure:
          requires:
            - create_infrastructure
      - smoke_test:
          requires:
            - configure_infrastructure
      - delete_infrastructure:
          requires:
            - configure_infrastructure
            - smoke_test 