version: 2.1

parameters:
  stack-name: 
    type: string
    default: "uda-prod-${CIRCLE_WORKFLOW_ID}"

commands:
  destroy_environment_on_fail:
    steps:
     - run:
          name: Destroy environment
          command: |
            apk add python3
            apk add --update py-pip
            pip3 install --upgrade pip
            pip3 install awscli
            aws cloudformation delete-stack --region=eu-central-1 --stack-name << pipeline.parameters.stack-name >>
          when: on_fail

jobs:
  create_infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Ensure backend infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file template.yml \
              --stack-name << pipeline.parameters.stack-name >>
  configure_infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: 
            - "4c:a2:f6:27:8f:f6:cf:71:7a:66:dd:ad:5a:cf:5d:55"
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            pip3 install --upgrade pip
            pip3 install awscli
      - run:
          name: Add EC2 instance ip to inventory
          command: |
            aws ec2 describe-instances \
            --region=eu-central-1 \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:Purpose,Values=cicd1" \
            --output text >> inventory           
      - run:
          name: Configure server
          command: |
            ansible-playbook -i inventory main.yml
      - destroy_environment_on_fail
  smoke_test:
    docker:
      - image: alpine:latest
    steps:
      - run:
          name: Install curl
          command: |
            apk add curl
      - run:
          name: SmokeTest
          command: |
            if curl -s --head "https://google123.com" 
            then
              echo "It worked!"
              exit 0
            else
              echo "It failed"
              exit 1
            fi
      - destroy_environment_on_fail
  delete_infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - run:
          name: Delete infrastructure
          command: |
            aws cloudformation delete-stack --region=eu-central-1 --stack-name << pipeline.parameters.stack-name >>
  create_and_deploy_front_end:
    docker:
      - image: amazon/aws-cli
    steps:
      - run:
        name: Create S3 bucket prod
        command: |
          aws cloudformation deploy --template-file bucket.yml \
          --stack-name "${CIRCLE_WORKFLOW_ID:0:7}" \
          --parameter-overrides PipelineID="${CIRCLE_WORKFLOW_ID:0:7}"
  get_last_deployment_id:
    docker:
      - image: amazon/aws-cli
    steps:
      - run: mkdir -p workspace
      - run:
        name: Cleanup after promotion
        command: |
          aws cloudformation \
          list-exports --query "Exports[?Name==\`PipelineID\`].Value" \
          --no-paginate --output text > workspace/lastid
      - persist_to_workspace:
          root: workspace
          paths:
            - lastid
  promote_to_production:
    docker:
      - image: amazon/aws-cli
    steps:
      - run:
        name: Promote to prod
        command: |
          aws cloudformation deploy \
          --template-file cloudfront.yml \
          --stack-name production-distro \
          --parameter-overrides PipelineID="${CIRCLE_WORKFLOW_ID}"
  clean_up_old_front_end:
    docker:
      - image: amazon/aws-cli
    steps:
      - attach_workspace:
        at: /tmp/workspace
      - run: PreviousPipelineID=(`cat /tmp/workspace/lastid`)
      - run:
        name: Clean up old cleanup old frontend
        command: |
          aws s3 rm "s3://${OldPipelineID}" --recursive
          aws cloudformation delete-stack --stack-name "${PreviousPipelineID}"

workflows:
  my_workflow:
    jobs:
      # - create_infrastructure
      # - configure_infrastructure:
      #     requires:
      #       - create_infrastructure
      # - smoke_test:
      #     requires:
      #       - create_infrastructure
      #       - configure_infrastructure
      # - create_and_deploy_front_end:
      #     requires:
      #       - create_infrastructure
      #       - configure_infrastructure
      #       - smoke_test
      # - delete_infrastructure:
      #     requires:
      #       - create_infrastructure
      #       - configure_infrastructure
      #       - smoke_test 
      #       - create_and_deploy_front_end
        - create_and_deploy_front_end
        - get_last_deployment_id
        - promote_to_production:
            requires:
              - create_and_deploy_front_end
        - clean_up_old_front_end:
            requires:
              - promote_to_production